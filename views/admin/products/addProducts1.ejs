<div class="content-body">
    <div class="container-fluid">
        <h2>Add Product</h2>
        <form action="/admin/products/add" method="POST" enctype="multipart/form-data">
            <div class="form-group">
                <label for="name">Product Name</label>
                <input type="text" name="name" class="form-control" required>
            </div>
            <div class="form-group">
                <label for="description">Description</label>
                <textarea name="description" class="form-control" required></textarea>
            </div>
            <div class="form-group">
                <label for="price">Price</label>
                <input type="number" name="price" class="form-control" required>
            </div>
            <div class="form-group">
                <label class="form-label">Category</label>
                            <select class="form-select" name="categoryName">
                                <% categories.forEach(category => { %>
                                    <option value="<%- category._id %>"><%- category.name %></option>
                                <% }) %>
                            </select>
            </div>
            <div class="form-group">
                <label for="highlights">Highlights (comma-separated)</label>
                <input type="text" name="highlights" class="form-control">
            </div>
            <div class="form-group">
                <label for="mainImage">Main Image</label>
                <input type="file" id="mainImage" name="mainImage" class="form-control" required>
                <img id="main-cropped-image" src="#" alt="Cropped Image" style="display:none;">
            </div>
            <div class="form-group">
                <label for="subImages">Additional Images</label>
                <input type="file" id="subImages" name="subImages" class="form-control" multiple>
                <div id="subImagePreviews" class="mt-2"></div>
                <button type="button" class="btn btn-danger" id="clearSubImages" style="display:none;">Clear Sub Images</button>
            </div>
            <!-- Add Variant Section -->
            <div id="variant-container">
                <div class="form-group variant-box">
                    <h5>Variant 1</h5>
                    <label for="variant-size-0">Size</label>
                    <input type="text" name="variants[0][size]" class="form-control" required>
                    <label for="variant-stock-0">Stock</label>
                    <input type="number" name="variants[0][stock]" class="form-control" required>
                </div>
            </div>
            <button type="button" class="btn btn-secondary" id="add-variant">Add Variant</button>
            <div id="variant-limit-message" class="text-danger" style="display:none;">Maximum 6 variants allowed</div>

            <button type="submit" class="btn btn-primary">Add Product</button>
        </form>
    </div>
</div>

<!-- Modal for main image cropping -->
<div class="modal fade" id="cropModalProduct" tabindex="-1" role="dialog" aria-labelledby="cropModalLabelProduct"
    aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropModalLabelProduct">Crop Image</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="img-container">
                    <img id="image-to-crop-product" src="" alt="Picture">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="cropButtonProduct">Crop</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for sub image cropping -->
<div class="modal fade" id="cropModalSubImage" tabindex="-1" role="dialog" aria-labelledby="cropModalLabelSubImage"
    aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropModalLabelSubImage">Crop Sub Image</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="subImageCarousel" class="carousel slide" data-ride="carousel">
                    <div class="carousel-inner"></div>
                    <a class="carousel-control-prev" href="#subImageCarousel" role="button" data-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="sr-only">Previous</span>
                    </a>
                    <a class="carousel-control-next" href="#subImageCarousel" role="button" data-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="sr-only">Next</span>
                    </a>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="cropButtonSubImage">Crop</button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    let variantCount = 1;

    document.getElementById('add-variant').addEventListener('click', function() {
        if (variantCount < 6) {
            const variantContainer = document.getElementById('variant-container');
            const newVariant = document.createElement('div');
            newVariant.classList.add('form-group', 'variant-box');
            newVariant.innerHTML = `
                <h5>Variant ${variantCount + 1}</h5> <!-- Incrementing heading for each variant -->
                <label for="variant-size-${variantCount}">Size</label>
                <input type="text" name="variants[${variantCount}][size]" class="form-control" required>
                <label for="variant-stock-${variantCount}">Stock</label>
                <input type="number" name="variants[${variantCount}][stock]" class="form-control" required>
            `;
            variantContainer.appendChild(newVariant);
            variantCount++;
        } else {
            document.getElementById('variant-limit-message').style.display = 'block';
        }
    });

    document.getElementById('subImages').addEventListener('change', function(event) {
        const subImagePreviews = document.getElementById('subImagePreviews');
        const clearButton = document.getElementById('clearSubImages');
        subImagePreviews.innerHTML = '';
        const files = event.target.files;

        if (files.length > 0) {
            clearButton.style.display = 'inline-block';
        }

        for (const file of files) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const img = document.createElement('img');
                img.src = e.target.result;
                img.classList.add('img-thumbnail', 'm-2');
                img.style.width = '150px';
                img.style.height = '150px';
                subImagePreviews.appendChild(img);
            }
            reader.readAsDataURL(file);
        }
    });
    

    document.getElementById('clearSubImages').addEventListener('click', function() {
        document.getElementById('subImages').value = '';
        document.getElementById('subImagePreviews').innerHTML = '';
        document.getElementById('clearSubImages').style.display = 'none';
    });
});

$(document).ready(function () {
    var cropper;
    var subImagesData = [];
    var currentImageIndex = 0;

    // Initialize cropper for main image
    initializeCropper(
        document.getElementById('mainImage'),
        document.getElementById('image-to-crop-product'),
        document.getElementById('main-cropped-image'),
        'cropModalProduct',
        'cropButtonProduct'
    );

    // Function to initialize cropper
    function initializeCropper(inputElement, imageElement, croppedImageElement, modalId, buttonId) {
        inputElement.addEventListener('change', function (e) {
            const files = e.target.files;
            const done = function (url) {
                inputElement.value = ''; // Clear the input
                imageElement.src = url;
                $('#' + modalId).modal('show');
            };
            if (files && files.length > 0) {
                const reader = new FileReader();
                reader.onload = function (event) {
                    done(event.target.result);
                };
                reader.readAsDataURL(files[0]);
            }
        });

        $('#' + modalId).on('shown.bs.modal', function () {
            cropper = new Cropper(imageElement, {
                aspectRatio: 1,
                viewMode: 3,
            });
        }).on('hidden.bs.modal', function () {
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }
        });

        document.getElementById(buttonId).addEventListener('click', function () {
            const canvas = cropper.getCroppedCanvas({
                width: 400,
                height: 400,
            });
            croppedImageElement.src = canvas.toDataURL();
            croppedImageElement.style.display = 'block';
            canvas.toBlob(function (blob) {
                const file = new File([blob], 'cropped.jpg', { type: 'image/jpeg' });
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                inputElement.files = dataTransfer.files;
            });
            $('#' + modalId).modal('hide');
        });
    }

    // Event listener for sub images
    document.getElementById('subImages').addEventListener('change', function (e) {
        const files = e.target.files;
        subImagesData = []; // Reset the subImagesData array
        const subImagePreviews = document.getElementById('subImagePreviews');
        subImagePreviews.innerHTML = '';

        for (let i = 0; i < files.length; i++) {
            const reader = new FileReader();
            reader.onload = function (event) {
                subImagesData.push({
                    file: files[i],
                    src: event.target.result,
                    cropped: false
                });
                if (i === files.length - 1) {
                    openSubImageCarousel();
                }
            };
            reader.readAsDataURL(files[i]);
        }
    });

    // Function to open the carousel modal for sub images
    function openSubImageCarousel() {
        const carouselInner = document.querySelector('#subImageCarousel .carousel-inner');
        carouselInner.innerHTML = '';

        subImagesData.forEach((data, index) => {
            const activeClass = index === 0 ? 'active' : '';

            const carouselItem = `
                <div class="carousel-item ${activeClass}">
                    <div class="img-container">
                        <img id="subimage-to-crop-${index}" src="${data.src}" alt="Sub Image ${index}">
                    </div>
                </div>`;
            carouselInner.insertAdjacentHTML('beforeend', carouselItem);
        });

        $('#cropModalSubImage').modal('show');
        currentImageIndex = 0;
        initializeSubImageCropper(currentImageIndex);
    }

    // Function to initialize cropper for sub images in carousel
    function initializeSubImageCropper(index) {
        const imageElement = document.getElementById(`subimage-to-crop-${index}`);
        if (!imageElement) return;

        if (cropper) {
            cropper.destroy();
        }
        cropper = new Cropper(imageElement, {
            aspectRatio: 1,
            viewMode: 3,
        });

        document.getElementById('cropButtonSubImage').onclick = function () {
            const canvas = cropper.getCroppedCanvas({
                width: 400,
                height: 400,
            });
            canvas.toBlob(function (blob) {
                const file = new File([blob], 'cropped-subimage.jpg', { type: 'image/jpeg' });
                subImagesData[index].file = file;
                subImagesData[index].src = URL.createObjectURL(blob);
                subImagesData[index].cropped = true;

                if (index < subImagesData.length - 1) {
                    currentImageIndex++;
                    $('#subImageCarousel').carousel('next');
                } else {
                    updateSubImageInputFiles();
                    $('#cropModalSubImage').modal('hide');
                }
            });
        };
    }

    // Function to update the input files for sub images
    function updateSubImageInputFiles() {
        const dataTransfer = new DataTransfer();
        subImagesData.forEach(data => {
            dataTransfer.items.add(data.file);
        });
        document.getElementById('subImages').files = dataTransfer.files;
    }

    // Event listener for carousel slide event to initialize cropper for the current image
    $('#subImageCarousel').on('slid.bs.carousel', function (e) {
        const index = $(e.relatedTarget).index();
        initializeSubImageCropper(index);
    });

    // Manually initialize cropper on modal show
    $('#cropModalSubImage').on('shown.bs.modal', function () {
        initializeSubImageCropper(currentImageIndex);
    });
});

</script>
