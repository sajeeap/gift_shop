<!-- Profile form-->

<section class="user-profile-page">
  <div class="px-4 py-5 px-md-5 text-lg-start" style="background-color: hsl(0, 0%, 96%)">
    <div class="row gx-lg-5 justify-content-center">
      <div class="col-lg-3 mb-5 mb-lg-0">
        <div class="card">
          <div class="card-body py-5 px-md-5">
            <div class="d-flex">
              <div class="nav flex-column nav-pills me-3" id="v-pills-tab" role="tablist" aria-orientation="vertical">
                <a href="#" class="nav-link active" id="v-pills-account-tab" data-bs-toggle="pill"
                  data-bs-target="#v-pills-account" type="button" role="tab" aria-controls="v-pills-account"
                  aria-selected="true">Account
                </a>

                <a href="#" class="nav-link" id="v-pills-password-tab" data-bs-toggle="pill"
                  data-bs-target="#v-pills-password" type="button" role="tab" aria-controls="v-pills-password"
                  aria-selected="false">Change Password
                </a>
                <a href="#" class="nav-link" id="v-pills-wallet-tab" data-bs-toggle="pill"
                  data-bs-target="#v-pills-wallet" type="button" role="tab" aria-controls="v-pills-wallet"
                  aria-selected="false">Wallet
                </a>
                <a href="#" class="nav-link" id="v-pills-orders-tab" data-bs-toggle="pill"
                  data-bs-target="#v-pills-orders" type="button" role="tab" aria-controls="v-pills-orders"
                  aria-selected="false">Orders
                </a>

                <a href="#" class="nav-link" id="v-pills-returns-tab" data-bs-toggle="pill"
                  data-bs-target="#v-pills-returns" type="button" role="tab" aria-controls="v-pills-returns"
                  aria-selected="false">Returns</a>


                <a href="#" class="nav-link" id="v-pills-address-tab" data-bs-toggle="pill"
                  data-bs-target="#v-pills-address" type="button" role="tab" aria-controls="v-pills-address"
                  aria-selected="false">Address
                </a>
                <a href="#" class="nav-link" id="v-pills-referral-tab" data-bs-toggle="pill"
                  data-bs-target="#v-pills-referral" type="button" role="tab" aria-controls="v-pills-referral"
                  aria-selected="false">Refferal
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="col-lg-9 mb-5 mb-lg-0">
        <div class="card">
          <div class="card-body py-5 px-md-5">
            <div class="tab-content" id="v-pills-tabContent">
              <!-- Account -->
              <%- include('profile-tabs/account.ejs') %>
              <!-- change password -->
              <%- include('profile-tabs/change-password.ejs') %>

              <!-- Wallet -->
              <%- include('profile-tabs/wallet.ejs') %>

              <!-- Orders -->
              <%- include('profile-tabs/orders.ejs') %>
            
              <!-- returns -->
              <%- include('profile-tabs/returns.ejs') %>

              <!-- Address -->
              <%- include('profile-tabs/address.ejs') %>

              <!-- Address -->
              <%- include('profile-tabs/refferel.ejs') %>
            </div>

            

            



            

            


            


          </div>
        </div>
      </div>
    </div>
  </div>
  </div>



</section>

<!-- add/edit address Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
  aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Add/Edit Address</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="address-form" action="/user/add-address" method="POST">
        <div class="modal-body">
          <input type="hidden" name="addressId" id="addressId" />
          <input type="text" name="name" id="name" placeholder="Name" class="form-control mb-2" required />
          <input type="text" name="address_type" id="address_type" placeholder="Address Type" class="form-control mb-2"
            required />
          <input type="text" name="zip_code" id="zip_code" placeholder="Zip Code" class="form-control mb-2" required />
          <input type="text" name="locality" id="locality" placeholder="Locality" class="form-control mb-2" required />
          <input type="text" name="house_name" id="house_name" placeholder="House Name" class="form-control mb-2"
            required />
          <input type="text" name="area_street" id="area_street" placeholder="Area/Street" class="form-control mb-2"
            required />
          <input type="text" name="town" id="town" placeholder="Town" class="form-control mb-2" required />
          <input type="text" name="state" id="state" placeholder="State" class="form-control mb-2" required />
          <input type="text" name="landmark" id="landmark" placeholder="Landmark" class="form-control mb-2" required />
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">
            Close
          </button>
          <button type="submit" class="btn btn-primary">Save</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Add Money Modal -->
<div class="modal fade" id="addMoneyModal" tabindex="-1" aria-labelledby="addMoneyModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addMoneyModalLabel">Add Money to Wallet</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="addMoneyForm">
          <div class="mb-3">
            <label for="amount" class="form-label">Amount (USD)</label>
            <input type="number" class="form-control" id="amount" name="amount" required />
          </div>
          <div class="d-flex justify-content-end">
            <button type="button" class="btn btn-primary" id="payButton">
              Pay
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>





<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<!-- SweetAlert2 and Razorpay scripts -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>



<!-- //cancell if pending
// -->
<!-- <script>
  //   document.addEventListener('DOMContentLoaded', () => {
  //     const updateCountdown = (orderId, createdAt) => {
  //       const countdownElement = document.getElementById(`countdown_${orderId}`);
  //       const createdDate = new Date(createdAt);
  //       const now = new Date();
  //       const twoHours = 2 * 60 * 60 * 1000; // 2 hours in milliseconds
  //       const timeLeft = twoHours - (now - createdDate);

  //       if (timeLeft > 0) {
  //         const hours = Math.floor(timeLeft / (1000 * 60 * 60));
  //         const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
  //         const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);

  //         countdownElement.textContent = `${hours} hours ${minutes} minutes ${seconds} seconds`;
  //       } else {
  //         countdownElement.textContent = 'Time expired. Your order has been cancelled.';

  //         // Optionally, disable or hide elements related to the order
  //         document.querySelector(`#orderModal_${orderId} .modal-footer`).innerHTML = '<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>';

  //         // Optionally, inform the server about the cancellation
  //         fetch(`/user/orders/cancel/${orderId}`, { method: 'POST' })
  //           .then(response => response.json())
  //           .then(data => {
  //             if (data.success) {
  //               console.log(`Order ${orderId} cancelled.`);
  //             } else {
  //               console.error(`Failed to cancel order ${orderId}.`);
  //             }
  //           });
  //       }
  //     };

  //     // Loop through each order with a pending payment status
  //     document.querySelectorAll('[id^="countdown_"]').forEach(element => {
  //       const orderId = element.id.split('_')[1];
  //       const createdAt = element.dataset.createdAt;
  //       updateCountdown(orderId, createdAt);

  //       // Update the countdown every second
  //       setInterval(() => {
  //         updateCountdown(orderId, createdAt);
  //       }, 1000);
  //     });
  //   });
  // </script> -->

<!-- //address -->
<script>
  function openAddModal() {
    document.getElementById("address-form").reset();
    document.getElementById("addressId").value = ""; // Clear the address ID for adding a new address
    $("#exampleModal").modal("show");
  }

  function openEditModal(addressId) {
    const address = document.getElementById("address-" + addressId);
    const name = address.querySelector(".name").innerText;
    const addressType = address.querySelector(".address_type").innerText;
    const zipCode = address.querySelector(".zip_code").innerText;
    const locality = address.querySelector(".locality").innerText;
    const houseName = address.querySelector(".house_name").innerText;
    const areaStreet = address.querySelector(".area_street").innerText;
    const town = address.querySelector(".town").innerText;
    const state = address.querySelector(".state").innerText;
    const landmark = address.querySelector(".landmark").innerText;

    document.getElementById("addressId").value = addressId;
    document.getElementById("name").value = name;
    document.getElementById("address_type").value = addressType;
    document.getElementById("zip_code").value = zipCode;
    document.getElementById("locality").value = locality;
    document.getElementById("house_name").value = houseName;
    document.getElementById("area_street").value = areaStreet;
    document.getElementById("town").value = town;
    document.getElementById("state").value = state;
    document.getElementById("landmark").value = landmark;

    $("#exampleModal").modal("show");
  }

  document
    .getElementById("address-form")
    .addEventListener("submit", function (e) {
      e.preventDefault(); // Prevent form submission

      const name = document.getElementById("name").value;
      const addressType = document.getElementById("address_type").value;
      const zipCode = document.getElementById("zip_code").value;
      const locality = document.getElementById("locality").value;
      const houseName = document.getElementById("house_name").value;
      const areaStreet = document.getElementById("area_street").value;
      const town = document.getElementById("town").value;
      const state = document.getElementById("state").value;
      const landmark = document.getElementById("landmark").value;

      const addressId = document.getElementById("addressId").value;

      let url = "/user/add-address";
      let method = "POST";

      if (addressId) {
        url = "/user/edit-address";
        method = "POST";
      }

      // If all validations pass, submit the form using AJAX
      fetch(url, {
        method: method,
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          addressId,
          name,
          addressType,
          zipCode,
          locality,
          houseName,
          areaStreet,
          town,
          state,
          landmark,
        }),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            Swal.fire({
              icon: "success",
              title: "Success",
              text: data.message,
            }).then(() => {
              // Optionally redirect or perform other actions after success
              window.location.href = "/user/profile"; // Redirect to profile page
            });
          } else {
            Swal.fire({
              icon: "error",
              title: "Error",
              text: data.message,
            });
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          Swal.fire({
            icon: "error",
            title: "Server Error",
            text: "An error occurred while processing the address",
          });
        });
    });

  function editAddress(addressId) {
    openEditModal(addressId);
  }

  function deleteAddress(addressId) {
    Swal.fire({
      title: "Are you sure?",
      text: "Do you really want to delete this address??",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "Yes, Delete it!",
      cancelButtonText: "No, Cancel!",
    }).then((result) => {
      if (result.isConfirmed) {
        fetch("/user/delete-address", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ addressId }),
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              Swal.fire({
                icon: "Success",
                title: "Deleted",
                text: "Your address has been deleted",
              }).then(() => {
                location.reload();
              });
            } else {
              Swal.fire({
                icon: "error",
                title: "Server Error",
                text: "An error occured while deleting the address",
              });
            }
          });
      }
    });
  }
</script>

<!-- //change passwrd -->
<script>
  document
    .getElementById("changePasswordForm")
    .addEventListener("submit", function (e) {
      e.preventDefault(); // Prevent form submission

      const currentPassword = document.getElementById("currentPassword").value;
      const newPassword = document.getElementById("newPassword").value;
      const confirmPassword = document.getElementById("confirmPassword").value;

      if (newPassword !== confirmPassword) {
        Swal.fire({
          icon: "error",
          title: "Validation Error",
          text: "New passwords do not match",
        });
        return; // Exit function to prevent further execution
      }

      // Optional client-side validation for password complexity
      if (
        newPassword.length < 8 ||
        !/[A-Z]/.test(newPassword) ||
        !/[0-9]/.test(newPassword)
      ) {
        Swal.fire({
          icon: "error",
          title: "Validation Error",
          text: "New password must be at least 8 characters long and contain at least one uppercase letter and one digit",
        });
        return; // Exit function to prevent further execution
      }

      // If all validations pass, submit the form using AJAX
      fetch("/user/change-password", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ currentPassword, newPassword, confirmPassword }),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            Swal.fire({
              icon: "success",
              title: "Success",
              text: data.message,
            }).then(() => {
              // Optionally redirect or perform other actions after success
              window.location.href = "/user/profile"; // Redirect to profile page
            });
          } else {
            Swal.fire({
              icon: "error",
              title: "Error",
              text: data.message,
            });
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          Swal.fire({
            icon: "error",
            title: "Server Error",
            text: "An error occurred while changing the password",
          });
        });
    });
</script>

<!-- //update profile -->
<script>
  document
    .getElementById("update_profile")
    .addEventListener("submit", function (e) {
      e.preventDefault();

      const firstName = document.getElementById("firstName").value.trim();
      const lastName = document.getElementById("lastName").value.trim();

      // Clear previous validation messages
      document
        .querySelectorAll(".form-outline small")
        .forEach((el) => (el.textContent = ""));

      let isValid = true;

      // Client-side validation
      if (!firstName) {
        isValid = false;
        document.querySelector("#firstName + small").textContent =
          "First name is required.";
        Swal.fire({
          icon: "error",
          title: "Validation Error",
          text: "First name is required.",
        });
      }

      if (!lastName) {
        isValid = false;
        document.querySelector("#lastName + small").textContent =
          "Last name is required.";
        Swal.fire({
          icon: "error",
          title: "Validation Error",
          text: "Last name is required.",
        });
      }

      if (isValid) {
        // Confirm with the user using SweetAlert2
        Swal.fire({
          title: "Are you sure?",
          text: "Do you want to update your profile?",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#3085d6",
          cancelButtonColor: "#d33",
          confirmButtonText: "Yes, update it!",
        }).then((result) => {
          if (result.isConfirmed) {
            // Send AJAX request
            fetch("/user/profile", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ firstName, lastName }),
            })
              .then((response) => response.json())
              .then((data) => {
                if (data.message) {
                  // Display success message
                  Swal.fire({
                    icon: "success",
                    title: "Success",
                    text: data.message,
                  });

                  // Update the username in the DOM
                  const usernameElement = document.getElementById("username");
                  usernameElement.textContent = `${firstName} ${lastName}`;
                } else {
                  // Handle error message
                  Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: "An error occurred while updating the profile.",
                  });
                }
              })
              .catch((error) => {
                console.error("Error:", error);
                Swal.fire({
                  icon: "error",
                  title: "Error",
                  text: "An error occurred while updating the profile.",
                });
              });
          }
        });
      }
    });
</script>

<!-- //default address -->
<script>
  function setDefaultAddress(addressId) {
    fetch("/user/set-default-address", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ addressId }),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          Swal.fire({
            title: "Success",
            text: data.message,
            icon: "success",
            confirmButtonText: "OK",
          }).then(() => {
            location.reload(); // Reload the page to reflect the changes
          });
        } else {
          Swal.fire({
            title: "Error",
            text: data.message,
            icon: "error",
            confirmButtonText: "OK",
          });
        }
      })
      .catch((error) => {
        console.error("Error:", error);
        Swal.fire({
          title: "Error",
          text: "An error occurred while processing your request.",
          icon: "error",
          confirmButtonText: "OK",
        });
      });
  }
</script>

<!-- //cancel order -->
<script>
  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".cancel-order").forEach((button) => {
      button.addEventListener("click", async (event) => {
        const orderId = event.target.dataset.orderId;
        const productId = event.target.dataset.productId;

        try {
          const response = await fetch(`/user/orders/${orderId}/items/${productId}/cancel`, {
            method: "PUT", // or DELETE, depending on your API design
            headers: {
              "Content-Type": "application/json",
            },
          });
          console.log("response", response);


          const result = await response.json();

          if (result.success) {
            Swal.fire({
              icon: 'success',
              title: 'Cancelled',
              text: 'Your order has been cancelled successfully.',
            }).then(() => {
              // Update the status in the UI
              const statusElement = document.querySelector(`#status-${productId}`);
              const cancelButton = event.target;
              const orderStatusElement = document.querySelector(`#order-status-${orderId}`);

              if (statusElement) {
                statusElement.textContent = 'Cancelled';
                statusElement.classList.add('text-danger'); // Optional: Add a class to highlight the status
              }

              // Update the overall order status if necessary
              if (orderStatusElement) {
                orderStatusElement.textContent = 'Cancelled';
                orderStatusElement.classList.add('alert-danger');
              }

              // Disable the cancel button
              cancelButton.disabled = true;
              cancelButton.textContent = 'Cancelled'; // Optional: Update button text

              // Optionally, reload the page after a slight delay
              setTimeout(() => {
                location.reload();
              }, 1000);
            });
          } else {
            Swal.fire({
              icon: 'error',
              title: 'Failed',
              text: result.error || 'Failed to cancel the order.',
            });
          }
        } catch (error) {
          console.error("Error cancelling order:", error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while cancelling the order.',
          });
        }
      });
    });
  });

</script>

<!-- // add money to waallet -->
<script>
  document.getElementById("payButton").addEventListener("click", function (e) {
    e.preventDefault();

    const amountUSD = parseFloat(document.getElementById("amount").value);
    if (isNaN(amountUSD) || amountUSD <= 0) {
      alert("Please enter a valid amount.");
      return;
    }

    // Example conversion rate

    fetch("/user/add-money", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ amount: amountUSD, currency: "INR" }),
    })
      .then((response) => response.json())
      .then((data) => {
        if (!data || !data.orderId || !data.amount) {
          throw new Error("Invalid server response.");
        }

        var options = {
          key: "<%= process.env.RAZOR_PAY_KEY_ID %>", // Your Razorpay Key ID
          amount: data.amount, // Amount in INR
          currency: "INR",
          order_id: data.orderId,
          name: "Wallet Top-up",
          description: "Add money to wallet",
          handler: function (response) {
            fetch("/user/verify-payment", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                orderId: data.orderId,
                paymentId: response.razorpay_payment_id,
                signature: response.razorpay_signature,
                amount: amountUSD, // Pass amount for wallet update
              }),
            })
              .then((response) => response.json())
              .then((data) => {
                if (data.success) {
                  alert("Payment successful!");
                  location.reload(); // Reload to update wallet balance
                } else {
                  alert("Payment verification failed!");
                }
              })
              .catch((error) => {
                console.error("Error verifying payment:", error);
                alert("Failed to verify payment.");
              });
          },
          theme: {
            color: "#3399cc",
          },
        };

        var rzp1 = new Razorpay(options);
        rzp1.open();
      })
      .catch((error) => {
        console.error("Error:", error);
        alert("Failed to process payment.");
      });
  });
</script>

<!-- // retry payment -->
<script>
  document.querySelectorAll(".retryPaymentButton").forEach(button => {
    button.addEventListener("click", function () {
      const orderId = this.getAttribute("data-order-id");
      const totalPrice = parseFloat(this.getAttribute("data-total-price"));

      Swal.fire({
        title: 'Retry Payment',
        input: 'select',
        inputOptions: {
          'Razor Pay': 'Razor Pay',
          'COD': 'Cash on Delivery',
          'Wallet': 'Wallet'
        },
        inputPlaceholder: 'Select a payment method',
        showCancelButton: true,
        inputValidator: (value) => {
          if (!value) {
            return 'You need to choose a payment method!';
          }
        }
      }).then((result) => {
        if (result.isConfirmed) {
          const selectedPaymentMethod = result.value;

          console.log("order::::::::::::::::::::::::::::", totalPrice, orderId);

          if (selectedPaymentMethod === "Razor Pay") {
            // Trigger Razorpay payment
            var options = {
              key: "<%= process.env.RAZOR_PAY_KEY_ID %>",
              amount: totalPrice * 100, // Convert to paise
              currency: "INR",
              name: "Order Payment",
              description: "Retry payment for order",
              handler: function (response) {
                // Verify payment
                fetch("/user/verify-orderpayment", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({
                    paymentId: response.razorpay_payment_id,
                    orderId: orderId,
                  }),
                })
                  .then((response) => response.json())
                  .then((verifyData) => {
                    if (verifyData.success) {
                      Swal.fire({
                        icon: "success",
                        title: "Payment Successful",
                        text: "Your order has been placed successfully.",
                        showConfirmButton: false,
                        timer: 1500,
                      }).then(() => {
                        location.reload(); // Or navigate to another page
                      });
                    } else {
                      Swal.fire({
                        icon: "error",
                        title: "Payment Verification Failed",
                        text: "Please try again.",
                      });
                    }
                  })
                  .catch((error) => {
                    console.error("Error verifying payment:", error);
                    Swal.fire({
                      icon: "error",
                      title: "Error",
                      text: "Failed to verify payment.",
                    });
                  });
              },
              theme: {
                color: "#3399cc",
              },
              modal: {
                ondismiss: function () {
                  Swal.fire({
                    icon: "info",
                    title: "Payment Cancelled",
                    text: "You cancelled the payment.",
                  });
                },
              },
            };
            var rzp1 = new Razorpay(options);
            rzp1.open();
          } else if (selectedPaymentMethod === "COD") {
            // Handle COD
            Swal.fire({
              icon: "info",
              title: "Cash on Delivery",
              text: "Proceeding with COD payment.",
              showConfirmButton: false,
              timer: 1500,
            }).then(() => {
              location.reload(); // Or navigate to another page
            });
          } else if (selectedPaymentMethod === "Wallet") {
            // Handle Wallet
            if (walletBalance >= totalPrice) {
              Swal.fire({
                icon: "success",
                title: "Payment Successful",
                text: "Your order has been placed successfully.",
                showConfirmButton: false,
                timer: 1500,
              }).then(() => {
                location.reload(); // Or navigate to another page
              });
            } else {
              Swal.fire({
                icon: "error",
                title: "Insufficient Wallet Balance",
                text: "Please add funds to your wallet and retry.",
              });
            }
          }
        }
      });
    });
  });

</script>